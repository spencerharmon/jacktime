import sys
import threading
import jack
from pprint import pprint

class BeatStateMachine(object):
    """
    Estimates frame on which beats occur based on recorded bar, beat, and frame information.

    Assumes that jack timebase master keeps frame-consistent beats since
    this is a basic requirement to play audio samples whose beat information
    is contained within the audio data along with events quantized to jack
    timebase, e.g. a recorded instrument playing along with a midi sequencer.

    Assumes that frames are used as discreet units of time as in their usage in ardour,
    non-daw, openav luppp, sooperlooper, et al.

    Assumes that frame consistency should always imply that frame number 0 is the first frame of
    bar 1 beat 1.

    Assumes that beats should always be equivalent in duration.

    Does not support the changing of time signature or samplerate. This is an unfortunate side
    effect of the current implementation of Jack timebase, since there is insufficient information
    to predict changes of this kind. This can probably be fixed.

    Can only estimate beat frames accurate to within the number of frames provided to the process
    callback. The estimate can be refined over time as beats occur outside the projected beat
    frame and refine the beat width. This process is fairly computationally expensive.

    Reports beat skew representing the percent difference between expected beat-width
    and observed beat-width. Skew results from the jack timebase master either changing
    beats at inconsistent frame intervals or changing beats at a different frame when
    replaying frames.

    Reports beat skew type:
        Linear: beat width increases with each beat
        Periodic: Beat occurs consistently late or early
        Bar: Beat occurs on unexpected bar.
    """
    def __init__(self, pos, max_buffer_size):
        self._max_buffer_size = max_buffer_size
        #tuple representing the minimum and maximum possible beat widths given the recorded
        #beat frames.
        #Beat width initialized with estimate from bpm until second beat is recorded. Refined
        #over time as beats are recorded.
        #Estimate is fpb conversion +/- 1/2 max buffer.
        wmin = int(self.get_frames_per_beat(pos) - (self._max_buffer_size / 2))
        wmax = int(wmin + self._max_buffer_size)
        self.beat_width = (wmin, wmax)

        #see use in refine_beat_accuracy
        self.highest_recorded_beat = 0

        #beat map contains beat window information of each beat recorded or estimated
        #beat. windows are recalculated on request to project_next_beat as beat inaccuracy
        #narrows

        #seed first beat to beat_mapexact

        beat_number = 1
        beat_window = (0, 0)
        #Maximum inaccuracy is equal to max buffer size * 2 due to worst case of the first beat
        #occurring on the first frame of the period and the next beat occurring on the last frame
        #of its period.
        #Except in init function, inaccuracy should always be calculated by subtracting the minimum
        #beat width from the maximum beat width, i.e.:
        #bmin, bmax = self.fpb
        #beat_inaccuracy = max-min
        #but for beat 1, our inaccuracy is 0 since we assume we know exactly when beat 1 occurs.
        beat_inaccuracy = 0

        self.beat_map = {beat_number: {
                'beat_window': beat_window,
                'beat_inaccuracy': beat_inaccuracy
            }
        }

        #register current beat (since it's not always bar 1 beat 1)
        cur_beat_no = (pos.bar - 1) * pos.beats_per_bar + pos.beat
        self.register_beat(pos, self._max_buffer_size)

    def register_beat(self, pos, nframes):
        """
        Signals position at time of detected beat change.
        This is a good time also to detect opportunities to shrink the fpb
        window for more accurate beat predictions.
        Do not register beat when transport is moved. This will lead to unexpected
        behavior.
        :param pos: cdata object, jack_position_t C struct, via jack-python
        :return: None
        """
        beat_number = self.beat_number_from_pos(pos)
        #beat 1 is assumed to be frame 0, with perfect accuracy.
        if int(beat_number) > 1:
            #get the window captured by calling object
            detected_beat_bmin = pos.frame
            detected_beat_bmax = pos.frame + nframes

            #check our prediction
            self.predict_beat_frame(beat_number)
            projected_beat_bmin, projected_beat_bmax = self.beat_map[beat_number]['beat_window']

            #compare and select proper outcome
            new_wmin = 0
            new_wmax = 0
            new_bmin = 0
            new_bmax = 0
            wmin, wmax = self.beat_width
            prev_bmin, prev_bmax = self.beat_map[beat_number-1]['beat_window']


            if projected_beat_bmin > detected_beat_bmin and projected_beat_bmax < detected_beat_bmax:
                #Good news; our prediction was pretty good. the beat happened on the proper cycle
                #and our prediction is more specific than what was detected. stick to our guns.
                new_bmin = projected_beat_bmin
                new_bmax = projected_beat_bmax
                new_wmin = wmin
                new_wmax = wmax
            elif projected_beat_bmin < detected_beat_bmin and projected_beat_bmax <= detected_beat_bmax:
                #better news; the beat frame can make our minimum beat length more specific.
                new_bmin = detected_beat_bmin
                new_bmax = projected_beat_bmax
                new_wmin = detected_beat_bmin - prev_bmax
                new_wmax = wmax
            elif projected_beat_bmin >= detected_beat_bmin and projected_beat_bmax > detected_beat_bmax:
                #also better news, but this time because the max was more specific.
                new_bmin = projected_beat_bmin
                new_bmax = detected_beat_bmax
                new_wmin = wmin
                new_wmax = detected_beat_bmax - prev_bmin
            elif projected_beat_bmin <= detected_beat_bmin and projected_beat_bmax >= detected_beat_bmax:
                new_bmin = detected_beat_bmin
                new_bmax = detected_beat_bmax
                new_wmin = detected_beat_bmin - prev_bmax
                new_wmax = detected_beat_bmax - prev_bmin

            if projected_beat_bmin > detected_beat_bmax:
                #projection too late or beat too early
                new_bmin = detected_beat_bmin
                #so don't change the beat width?
                new_wmin = detected_beat_bmin - prev_bmin
            if projected_beat_bmax < detected_beat_bmin:
                #projection too early or beat too late
                new_bmax = detected_beat_bmax
                new_wmax = detected_beat_bmax - prev_bmax

            self.beat_map[beat_number]['beat_window'] = new_bmin, new_bmax
            self.beat_map[beat_number]['beat_inaccuracy'] = new_wmax - new_wmin
            self.beat_width = new_wmin, new_wmax

    def predict_beat_frame(self, beat_number):
        """
        Return the projected beat frame for the beat specified.
        This is semantically relevant even in cases where the beat has been
        recorded since we can benefit from refinement using the current beat window.
        Used as an opportune time to back-fill beat window information with refined
        beat-width information by triggering refine_beat_accuracy.

        """
        if beat_number > 0:
            self.fill_predictions(beat_number)
            try:

                # load updated beat data
                bmin, bmax = self.beat_map[beat_number]['beat_window']

                # update accuracy if possible
                self.refine_beat_accuracy(beat_number)

                new_bmin, new_bmax = self.beat_map[beat_number]['beat_window']
                # average the minimum and maximum beat frames.
                projected_beat_frame = new_bmin + new_bmax / 2
                return projected_beat_frame
            except KeyError:
                # when self.beat_map[bar: [beat]] doesnt exist, estimate,
                # record, and return relevant information
                wmin, wmax = self.beat_width
                try:
                    prev_min, prev_max = self.beat_map[beat_number - 1]['beat_window']
                except KeyError:
                    self.predict_beat_frame(beat_number - 1)

                beat = {
                    'beat_window': (prev_min + wmin, prev_max + wmax),
                    'beat_inaccuracy': wmax - wmin
                }
                self.beat_map[beat_number] = beat

                new_bmin, new_bmax = self.beat_map[beat_number]['beat_window']
                # average the minimum and maximum beat frames.
                next_beat = (new_bmin + new_bmax) / 2
                return next_beat

    def fill_predictions(self, beat_number):
        for i in range(1, beat_number):
            try:
                beat_window, beat_inaccuracy = self.beat_map[i]
            except KeyError:
                self.predict_beat_frame(i)

    def refine_beat_accuracy(self, beat_number):
        '''
        if necessary, check and recursively update beat window and beat inaccuracy information
        back to zero.
        :param bar: bar number specified for update
        :return: None
        '''
        #step through relevant beats
        for i in range(1, int(beat_number)):
            beat = self.beat_map[i]
            bmin, bmax = self.beat_width
            current_beat_inaccuracy = bmax-bmin
            if beat['beat_inaccuracy'] > current_beat_inaccuracy:
                #beat window is updated relative to the previous
                #(presumably more accurate) beat, unless it's beat 1
                #this shouldn't happen because beat 1 should have inaccuracy 0
                if i is not 1:
                    prev_min, prev_max = self.beat_map[i-1]['beat_window']
                    my_min, my_max = beat['beat_window']
                    #this will add the beat window size to the beat width
                    #range recursively. Bad?
                    new_max = prev_max + bmax
                    if my_max < new_max:
                        #recorded max more specific.
                        new_max = my_max
                    new_min = prev_min + bmin
                    if my_min > new_min:
                        #recorded min more specific
                        new_min = my_min
                    beat['beat_window'] = new_min, new_max
                    beat['beat_inaccuracy'] = current_beat_inaccuracy

    def get_frames_per_beat(self, pos):
        bps = pos.beats_per_minute / 60
        fpb = pos.frame_rate / bps
        return fpb

    def beat_number_from_pos(self, pos):
        """
        returns the current absolute beat number
        :param pos: cdata object, jack_position_t C struct, via jack-python
        :return:
        """
        return int((pos.bar - 1) * pos.beats_per_bar + pos.beat)

    def set_max_buffer_size(self, max_buffer_size):
        """
        Accessor function to change self._max_buffer_size.
        :param max_buffer_size: The maximum number of frames that can be passed to the
        process callback function.
        :return: None
        """
        #todo: does this accessor need to exist?
        #maybe it would be useful if we decide to keep track of tempo change consistency
        #in the beat map. We could re-initialize the beat width on bpm change and refine beat
        #frames for the tempo "block" TODO
        self._max_buffer_size = max_buffer_size


class PyJackTimebaseClient(object):
    def __init__(self, client, shutdownevent):
        """

                :param client: python-jack Client object
                :param shutdownevent: threading event to signal shutdown
        """
        self.client = client
        self.shutdownevent = shutdownevent

        self.state, self.pos = self.client.transport_query_struct()

        self.beat_state = BeatStateMachine(self.pos, self.client.blocksize)

        self.client.set_process_callback(self.process)
        self.client.set_shutdown_callback(self.shutdown)
        #this is named set_buffer_size_callback in jack.
        self.client.set_blocksize_callback(self.buffer_size_callback)
        self.expected_next_frame = 0
        #keep state to signal discontinuity change only once
        self.o_discon = False

        self.beat_last_cycle = 0

    def process(self, nframes):
        self.state, self.pos = self.client.transport_query_struct()

        if self.pos.beat != self.beat_last_cycle and not self.check_if_repositioned():
            self.beat_state.register_beat(self.pos, nframes)

        print(self.beat_state.predict_beat_frame(self.beat_state.beat_number_from_pos(self.pos) + 1))

        self.after_process(nframes)

    def after_process(self, nframes):
        self.beat_last_cycle = self.pos.beat

        if self.state is jack.ROLLING:
            self.expected_next_frame = self.pos.frame + nframes
        else:
            self.expected_next_frame = self.pos.frame

    def check_if_repositioned(self):
        """
        Only valid during process callback.
        :return: bool
        """
        if self.pos.frame != self.expected_next_frame:
            if not self.o_discon:
                self.o_discon = True
                return True
        else:
            if self.o_discon:
                self.o_discon = False
                return False

    def buffer_size_callback(self, bufsize):
        #inform beat state machine of the change.
        self.beat_state.set_max_buffer_size(bufsize)

    def shutdown(self):
        self.shutdownevent.set()


if __name__ == "__main__":
    client = jack.Client('jacktime')
    shutdownevent = threading.Event()
    tclient = PyJackTimebaseClient(client, shutdownevent)
    with client:
        try:
            shutdownevent.wait()

        except KeyboardInterrupt:
            pprint(tclient.beat_state.beat_map)
        except Exception as e:
            print(e.with_traceback(e.__traceback__))
            sys.exit(0)
